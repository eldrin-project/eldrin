use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use sqlx::types::Uuid;
use std::collections::HashMap;

/// Represents a user in the system
#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct User {
    /// Unique user identifier
    pub id: Uuid,
    
    /// User's email address (may be null for some auth methods)
    pub email: Option<String>,
    
    /// User's phone number (may be null for some auth methods)
    pub phone: Option<String>,
    
    /// User's username (may be autogenerated)
    pub username: String,
    
    /// When the user was created
    pub created_at: DateTime<Utc>,
    
    /// When the user was last updated
    pub updated_at: DateTime<Utc>,
    
    /// Last login time
    pub last_login: Option<DateTime<Utc>>,
    
    /// Whether the user is active
    pub active: bool,
    
    /// Whether the user has verified their email
    pub email_verified: bool,
    
    /// Whether the user has verified their phone
    pub phone_verified: bool,
    
    /// The user's role
    pub role: UserRole,
}

/// User profile information
#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct UserProfile {
    /// Reference to the user
    pub user_id: Uuid,
    
    /// User's display name
    pub display_name: Option<String>,
    
    /// User's avatar URL
    pub avatar_url: Option<String>,
    
    /// User's preferred locale
    pub locale: Option<String>,
    
    /// User's timezone
    pub timezone: Option<String>,
    
    /// Additional profile data as JSON
    pub metadata: Option<HashMap<String, serde_json::Value>>,
}

/// User roles in the system
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
pub enum UserRole {
    Admin,
    User,
    Guest,
}

/// Authentication methods supported by the system
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
pub enum AuthMethod {
    EmailPassword,
    MagicLink,
    SmsCode,
    Github,
    Google,
    Keycloak,
}

/// Represents a user's connection to an external authentication provider
#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct ExternalAuth {
    /// Reference to the user
    pub user_id: Uuid,
    
    /// The provider (github, google, etc.)
    pub provider: String,
    
    /// External provider's user ID
    pub provider_user_id: String,
    
    /// Access token (encrypted)
    pub access_token: Option<String>,
    
    /// Refresh token (encrypted)
    pub refresh_token: Option<String>,
    
    /// When the token expires
    pub expires_at: Option<DateTime<Utc>>,
    
    /// Additional provider-specific data
    pub provider_data: Option<serde_json::Value>,
}
use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use sqlx::types::Uuid;
use std::collections::HashSet;

use super::{Role, Permission, UserRole};

/// Represents a user in the system
#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct User {
    /// Unique user identifier
    pub id: Uuid,
    
    /// User's email address (may be null for some auth methods)
    pub email: Option<String>,
    
    /// User's phone number (may be null for some auth methods)
    pub phone: Option<String>,
    
    /// User's username (may be autogenerated)
    pub username: String,
    
    /// When the user was created
    pub created_at: DateTime<Utc>,
    
    /// When the user was last updated
    pub updated_at: DateTime<Utc>,
    
    /// Last login time
    pub last_login: Option<DateTime<Utc>>,
    
    /// Whether the user is active
    pub active: bool,
    
    /// Whether the user has verified their email
    pub email_verified: bool,
    
    /// Whether the user has verified their phone
    pub phone_verified: bool,
    
    /// The user's legacy role (maintained for backward compatibility)
    pub role: UserRole,
    
    /// The user's roles (populated when loaded with roles)
    #[serde(skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<Role>>,
    
    /// The user's permissions (populated when loaded with permissions)
    #[serde(skip_serializing_if = "Option::is_none")]
    pub permissions: Option<HashSet<Permission>>,
}

/// Mapping between a user and a role
#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct UserRoleMapping {
    /// Reference to the user
    pub user_id: Uuid,
    
    /// Reference to the role
    pub role_id: Uuid,
    
    /// When the mapping was created
    pub created_at: DateTime<Utc>,
}